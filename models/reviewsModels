const db = require("../db/connection");


exports.selectReviews = () => {
    let queryStr = 
    `SELECT title, designer, owner, review_img_url, reviews.votes, category, reviews.created_at, COUNT (body) AS comment_count
    FROM reviews
    LEFT JOIN comments
    ON reviews.review_ID = comments.review_id
    GROUP BY reviews.review_ID
    ORDER BY reviews.created_at DESC;
    `
return db.query(queryStr).then((result) => {
return result.rows
})
}

exports.selectReview = (id) => {
    if (isNaN(id)) {
        return Promise.reject({
            status: 400,
            msg: 'Invalid ID'
        });
    }

    let queryStr = `
    SELECT reviews.*, reviews.review_id FROM reviews LEFT JOIN comments ON comments.review_id = reviews.review_id`;

    const queryValues = [];
    if (id) {
        queryStr += ` WHERE reviews.review_id = $1`;
        queryValues.push(id);
    }
    queryStr += ` GROUP BY reviews.review_id`;

    return db.query(queryStr, queryValues).then((res) => {
        if (res.rows.length > 0){
            return res.rows;
        } else {
            return Promise.reject({
                status: 404,
                msg: "Not Found"
            });
        }
    });
};

exports.selectComments = (review_id) => {
    const idNum = parseInt(review_id);
    if (Number.isNaN(idNum)) {
        return Promise.reject({
          status: 400,
          msg: 'Request Unavailable'
        });
      }
      return db.query(`
          SELECT * FROM reviews WHERE review_id = $1;
        `, [review_id])
        .then((result) => {
          if (result.rows.length === 0) {
            return Promise.reject({
              status: 404,
              msg: 'Please insert valid Review_ID'
            });
          }
          return db.query(`
              SELECT * FROM comments WHERE review_id = $1;
            `, [review_id])
            .then((response) => {
              return response.rows;
            });
        });
    }
